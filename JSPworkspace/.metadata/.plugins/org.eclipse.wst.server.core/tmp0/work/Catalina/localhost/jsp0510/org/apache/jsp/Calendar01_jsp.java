/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.62
 * Generated at: 2022-05-10 00:57:59 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.time.LocalDate;

public final class Calendar01_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.time.LocalDate");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>만년달력 만들기 01</title>\r\n");

	// 년도와 월을 받는다.
	int year = LocalDate.now().getYear();
	int month = LocalDate.now().getMonthValue();
	try{
		year = Integer.parseInt(request.getParameter("yy"));
		month = Integer.parseInt(request.getParameter("mm"));
	}catch(Exception e){
		// 넘어온 값이 유효하지 않다면 현재의 년월을 가지자!!!
		year = LocalDate.now().getYear();
		month = LocalDate.now().getMonthValue();
	}
	// 월이 감소하다가 보면 0이하가 된다. 이때는 년도가 1감소하고 월을 12월로 만든다.
	if(month<=0){
		year--;
		month = 12;
	}
	// 월이 증가하다가 보면 13이상이 된다. 이때는 년도가 1증가하고 월을 1월로 만든다.
	if(month>=13){
		year++;
		month = 1;
	}
	
	if(year<=0){
		year = LocalDate.now().getYear();
	}
	System.out.println(year + "년 " + month + "월");
	LocalDate localDate = LocalDate.of(year, month, 1); // 날짜를 1일로 만들기
	int lastDay = localDate.lengthOfMonth(); // 마지막 날짜
	int week = localDate.getDayOfWeek().getValue()%7; // 요일 : 0(일요일)
	System.out.println(localDate + " : 1 ~ " + lastDay + "( " + week + ")");

      out.write("\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("	table {\r\n");
      out.write("		width: 700px; margin: auto; border: none;border-spacing: 3px;\r\n");
      out.write("	}\r\n");
      out.write("	.title {\r\n");
      out.write("		font-size: 18pt; text-align: center; border: none; padding: 5px; background-color: white;\r\n");
      out.write("	}\r\n");
      out.write("	th { background-color: silver; border: 1px solid gray; padding: 5px;}\r\n");
      out.write("	td { border: 1px solid gray; padding: 5px; border-radius: 15px; text-align: center; height: 40px; }\r\n");
      out.write("\r\n");
      out.write("	\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<table>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<th colspan=\"2\" class=\"title\">\r\n");
      out.write("				<a href=\"?yy=");
      out.print(year-1 );
      out.write("&mm=");
      out.print(month);
      out.write("\"><img src=\"./images/previousYear.png\" alt=\"prevYear\" /></a> \r\n");
      out.write("				<a href=\"?yy=");
      out.print(year );
      out.write("&mm=");
      out.print(month-1);
      out.write("\"><img src=\"./images/previousMonth.png\" alt=\"prevMonth\" /></a>\r\n");
      out.write("			</th>\r\n");
      out.write("			<th colspan=\"3\" class=\"title\">");
      out.print(year );
      out.write('년');
      out.write(' ');
      out.print(month );
      out.write("월</th>\r\n");
      out.write("			<th colspan=\"2\" class=\"title\">\r\n");
      out.write("				<a href=\"?yy=");
      out.print(year );
      out.write("&mm=");
      out.print(month+1);
      out.write("\"><img src=\"./images/nextMonth.png\" alt=\"nextMonth\" /></a>\r\n");
      out.write("				<a href=\"?yy=");
      out.print(year+1 );
      out.write("&mm=");
      out.print(month);
      out.write("\"><img src=\"./images/nextYear.png\" alt=\"nextYear\" /></a>\r\n");
      out.write("			</th>\r\n");
      out.write("		</tr>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<th width=\"100px\">일</th>\r\n");
      out.write("			<th width=\"100px\">월</th>\r\n");
      out.write("			<th width=\"100px\">화</th>\r\n");
      out.write("			<th width=\"100px\">수</th>\r\n");
      out.write("			<th width=\"100px\">목</th>\r\n");
      out.write("			<th width=\"100px\">금</th>\r\n");
      out.write("			<th width=\"100px\">토</th>\r\n");
      out.write("		</tr>\r\n");
      out.write("		<tr>\r\n");
      out.write("			");

				// 1일의 요일을 맞추기 위해 빈칸 출력
				for(int i=0;i<week;i++){
					out.println("<td class='blank_date' style='background-color:lightgrey'>&nbsp;</td>");
				}
				// 1일부터 마지막 날짜까지 출력. 단 토요일이면 줄바꿈
				for(int i=1;i<=lastDay;i++){
					localDate = LocalDate.of(year, month, i); //출력한 날짜로 변경
					week = localDate.getDayOfWeek().getValue()%7; // 요일 : 0(일요일)
					if(week==0)
						out.println("<td style='color:red'>" + i + "</td>");
					else if(week==6)
						out.println("<td style='color:blue'>" + i + "</td>");
					else
					out.println("<td>" + i + "</td>");
					
					if(week==6){ // 토요일이면
						out.println("</tr>"); //줄바꿈
						if(i<lastDay){ // 출력한 날짜가 마지막 날짜가 아니라면 새로운줄 추가
							out.println("<tr>");
						}
					}
				}
				if(week<6){
					for(int i=week;i<6;i++)out.println("<td style='background-color:lightgrey'>&nbsp;</td>");
					out.println("</tr>");
				}
			
      out.write("\r\n");
      out.write("	</table>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
